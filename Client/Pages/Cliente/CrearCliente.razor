@page "/clientes/crear"
@page "/clientes/eliminar/{Id:int}"



<EditForm Model="@Clien" OnInvalidSubmit="Send">
    <h1>@Titulo</h1>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label style="color: blue;" for="nombre-completo">Nombre Completo</label>
        <InputText id="nombre-completo" class="form-control" @bind-Value="Clien.Nombre"></InputText>
    </div>

    <div class="form-group">
        <label style="color: blue;" for="">Sexo</label>
        <select class="form-control" @bind="Clien.Sexo">
            <option value="0">Seleccione sexo</option>
            @foreach (var Sexos in Sexos)
            {
                <option value="@Sexos.Id">@Sexos.Sexo</option>
            }
        </select>
    </div>



    <div class="form-group">
        <label style="color: blue;" for="direccion">Dirección</label>
        <InputText id="direccion" class="form-control" @bind-Value="Clien.Direccion"></InputText>
    </div>

    <div class="form-group">
        <label style="color: blue;" for="telefono">Teléfono</label>
        <InputText id="telefono" class="form-control" @bind-Value="Clien.Telefono"></InputText>
    </div>

    <div class="form-group">
        <label style="color: blue;" for="nacionalidad">Nacionalidad</label>
        <InputText id="nacionalidad" class="form-control" @bind-Value="Clien.Nacionalidad"></InputText>
    </div>



    <div class="form-group">
        <label style="color: blue;" for="cedula">Cédula</label>
        <InputText id="cedula" class="form-control" @bind-Value="Clien.Cedula"></InputText>
    </div>

    <div class="form-group">
        <label style="color: blue;" for="ocupacion">Ocupación</label>
        <InputText id="ocupacion" class="form-control" @bind-Value="Clien.Ocupacion"></InputText>
    </div>

    <div class="form-group">
        <label style="color: blue;" for="pasaporte">Pasaporte</label>
        <InputText id="pasaporte" class="form-control" @bind-Value="Clien.Pasaporte"></InputText>
    </div>

    <div class="form-group">
        <label style="color: blue;" for="licencia">Licencia</label>
        <InputText id="licencia" class="form-control" @bind-Value="Clien.Licencia"></InputText>
    </div>

    <div class="form-group">
        <label style="color: blue;" for="fecha-expiracion-licencia">Fecha de expiración licencia</label>
        <input id="fecha-expiracion-licencia" type="text" class="form-control" @ref="dateInput" @bind="@Clien.FechaExpiracionLicencia" />
    </div>

    <button type="submit" class="btn btn-primary" @onclick="Send">Ok</button>
</EditForm>


@code
{
    [Parameter]

    public int Id {get; set;} = 0;

    public string Titulo => Id>0? "Editar clientes":"Crear clientes";

    public ClienteUpdateRequest Clien {get; set;} = new ClienteUpdateRequest();

    private List<ClienteRecord> Sexos { get; set; } = new List<ClienteRecord>()
    {
        new ClienteRecord {Id = 1, Sexo = "Masculino" },
        new ClienteRecord {Id = 2, Sexo = "Femenino" },
    };

protected override async Task OnInitializedAsync()
{
    if(Id!=0){
        var resultado = await ClienteManager.GetByIdAsync(Id);
        if(resultado.Succeeded){
            Clien.Id = resultado.Data.Id;
            Clien.Nombre = resultado.Data.Nombre;
            Clien.Direccion = resultado.Data.Direccion;
            Clien.Telefono = resultado.Data.Telefono;
            Clien.Nacionalidad = resultado.Data.Nacionalidad;
            Clien.Cedula = resultado.Data.Cedula;
            Clien.Ocupacion = resultado.Data.Ocupacion;
            Clien.Pasaporte = resultado.Data.Pasaporte;
            Clien.Licencia = resultado.Data.Licencia;
            Clien.FechaExpiracionLicencia = resultado.Data.FechaExpiracionLicencia;
            Clien.Sexo = resultado.Data.Sexo;
            StateHasChanged();
        }
    }
}


    private ElementReference dateInput;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("initializeFlatpickr", dateInput);
        }
    }


        private void VerificarFormaDeSexoSeleccionada()
    {
        var sexoSeleccionado = Sexos.FirstOrDefault(p => p.Id.ToString() == Clien.Sexo);
        if (sexoSeleccionado != null)
        {
            Clien.Sexo = sexoSeleccionado.Sexo;
            Console.WriteLine("Forma de pago seleccionada: " + sexoSeleccionado.Sexo);
        }
        else
        {
            Console.WriteLine("No se ha seleccionado una forma de pago válida.");
        }
    }


public async void Send()
{
    VerificarFormaDeSexoSeleccionada();
    var resultado = await ClienteManager.CreateAsync(Clien);

    if(resultado.Succeeded) urlHelper.NavigateTo("/clientes");
}

public List<string> ListaPaises { get; set; } = new List<string>
{
    "República Dominicana",
    "Estados Unidos",
    "México",
    "España",
    // Agrega más países según sea necesario
};

}
