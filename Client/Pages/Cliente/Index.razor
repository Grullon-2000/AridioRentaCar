@page "/clientes"
@inject IClienteManager ClienteManager
@inject NavigationManager urlHelper
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.JSInterop
@using System.Net.Http
@using System.Threading.Tasks
@using Blazorise


<h1 class="btn-registro" style="color: darkblue;">Registro de clientes</h1>
<br>

<button class="btn btn-outline-primary btn-agregar" @onclick="Agregar">Agregar</button>


<button class="btn btn-primary btn-imprimir" @onclick="MostrarInforme">Mostrar Informe</button>


<br>

@*Tabla de Clientes*@

@if (clientes != null)
{
    <br>
    <table class="table table-hover table-dark btn-imprimir">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Nombre</th>
                <th scope="col">Sexo</th>
                <th scope="col">Dirección</th>
                <th scope="col">Teléfono</th>
                <th scope="col">Nacionalidad</th>
                <th scope="col">Cédula</th>
                <th scope="col">Ocupación</th>
                <th scope="col">Pasaporte</th>
                <th scope="col">Licencia</th>
                <th scope="col">Fecha Expiración Licencia</th>
                <th class="btn-edicion"></th>
                <th class="btn-eliminacion"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var clien in clientes)
            {
                <tr>
                    <td scope="row">@clien.Id</td>
                    <td scope="row">@clien.Nombre</td>
                    <td scope="row">@clien.Sexo</td>
                    <td scope="row">@clien.Direccion</td>
                    <td scope="row">@clien.Telefono</td>
                    <td scope="row">@clien.Nacionalidad</td>
                    <td scope="row">@clien.Cedula</td>
                    <td scope="row">@clien.Ocupacion</td>
                    <td scope="row">@clien.Pasaporte</td>
                    <td scope="row">@clien.Licencia</td>
                    <td scope="row">@clien.FechaExpiracionLicencia.ToString("dd/MM/yyyy")</td>
                    <td scope="row" class="btn-edicion">
                        <button class="btn btn-outline-warning" @onclick="()=>Editar(clien.Id)">Editar</button>
                    </td>
                    <td scope="row" class="btn-eliminacion">
                        <th scope="row"><button class="btn btn-outline-danger " @onclick="()=>MostrarConfirmacionEliminar(clien.Id)">Eliminar</button></th>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No hay clientes registrados...</p>
}





@*Modelo que mustra en pantalla para poder eliminar a los clientes*@

@if (confirmacionVisible)
{
    <div>
        <span>¿Estás seguro de que deseas eliminar este cliente?</span>
        <button class="btn btn-outline-danger" @onclick="ConfirmarEliminarCliente">Eliminar</button>
        <button class="btn btn-outline-secondary" @onclick="CancelarEliminarCliente">Cancelar</button>
    </div>
}


@*Modelo donde se refleja los informes de los clientes, por pantalla*@

<Modal @ref="informeModalRef" IsOpen="@informeVisible">
    <ModalContent Class="modal-content my-custom-modal">
        <ModalHeader Class="my-custom-modal-header">
            <h5 style="color: blue;" class="modal-title">Aridio Renta Car</h5>
        </ModalHeader>
        <ModalBody Class="my-custom-modal-body">
            <h3>Informe de clientes</h3>
            <p>Total de clientes: @cantidadClientes</p>
            <p>Total de clientes masculinos: @cantidadClientesMasculinos</p>
            <p>Total de clientes femeninos: @cantidadClientesFemeninos</p>
        </ModalBody>
        <button class="btn-imprimir btn btn-primary" @onclick="Print">Imprimir</button>
    </ModalContent>
</Modal>



@code
{
    // Variables y listas para cargar los clientes ya registrados en la base de datos y llamarlos para visualizar en la tabla.
    public List<ClienteRecord>? clientes { get; set; }
    public string filtroNombre { get; set; }

    // Variables para el menu que se muestra para eliminar los clientes 
    bool confirmacionVisible = false;
    int clienteIdAEliminar = 0;
    
    // Variables para muestrar los informes, por pantalla.
    private Modal informeModalRef;
    private bool informeVisible = false;

    
    // variables para sacar la cantidad de clientes y por sus sexos en el informe.
    private int cantidadClientes = 0;
    private int cantidadClientesMasculinos = 0;
    private int cantidadClientesFemeninos = 0;


    protected override async Task OnInitializedAsync()
    {
        // Carga los clientes y las cantidades de los mismos que estan en la base de datos, esto lo llama.
        await CargarClientes();
        CalcularCantidadClientes();
    }

    // Modelo para Agregar los clientes, te redirecciona al formulario de crar a los clientes
    public void Agregar()
    {
        urlHelper.NavigateTo("/clientes/crear", false);
    }

    // Modelo para Editar los clientes, te redirecciona al formulario de editar a los clientes
    public void Editar(int Id)
    {
        urlHelper.NavigateTo($"/clientes/editar/{Id}", false);
    }

    // Modelo para la muestra la confirmacion de la de eliminar los clientes
    private async Task MostrarConfirmacionEliminar(int clienteId)
    {
        clienteIdAEliminar = clienteId;
        confirmacionVisible = true;
    }

    // Modelo para la Cancelar la eliminacion de los clientes
    private void CancelarEliminarCliente()
    {
        confirmacionVisible = false;
        clienteIdAEliminar = 0;
    }

    // Modelo para la confirmacion de la eliminacion de los clientes
    private async Task ConfirmarEliminarCliente()
    {
        var resultado = await ClienteManager.DeleteAsync(clienteIdAEliminar);
        if (resultado.Succeeded)
        {
            await CargarClientes();
        }
        else
        {
            // Manejar el error
        }

        confirmacionVisible = false;
        clienteIdAEliminar = 0;
    }
    

    private async Task CargarClientes()
    {
        // COndicion que carga y llama los clientes registados en la base de datos y los llama por su nombre como una lista.
        var resultado = await ClienteManager.GetAsync();

        if (resultado.Succeeded)
        {
            if (!string.IsNullOrEmpty(filtroNombre))
            {
                clientes = resultado.Items
                    .Where(c => c.Nombre.ToLower().Contains(filtroNombre.ToLower()))
                    .ToList();
            }
            else
            {
                clientes = resultado.Items.ToList();
            }
        }
        else
        {
            // Manejar el error
        }
    }

// Modelo que calcula la cantidad de clientes registrados para el informe o reportes.
    private void CalcularCantidadClientes()
    {
        cantidadClientes = clientes?.Count ?? 0;
        cantidadClientesMasculinos = clientes?.Count(c => c.Sexo == "Masculino") ?? 0;
        cantidadClientesFemeninos = clientes?.Count(c => c.Sexo == "Femenino") ?? 0;
    }


    @* private void MostrarMensajeError(string mensaje)
    {
        // Aquí puedes implementar la lógica para mostrar el mensaje de error al usuario
        // Por ejemplo, mostrar un cuadro de diálogo, mostrar una notificación, etc.
        Console.WriteLine(mensaje);
    } *@


// Modelo que imprime el contendio en pantalla de la pagina web, es un modelo de JavaScript 
    private async Task Print()
    {
        await JSRuntime.InvokeVoidAsync("print");
    }


// Modelo para Mostrar los informes
    private void MostrarInforme()
    {
        informeVisible = true;
        informeModalRef.Show();
    }

}